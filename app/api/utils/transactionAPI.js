// api/utils/transactionAPI.js

const API_BASE_URL = process.env.NEXT_PUBLIC_CRUD_API;

// Get authentication token from localStorage
const getAuthToken = () => {
  if (typeof window !== 'undefined') {
    return localStorage.getItem('expense_tracker_access_token');
  }
  return null;
};

// Create headers with authentication
const createHeaders = () => {
  const token = getAuthToken();
  return {
    'Content-Type': 'application/json',
    ...(token && { 'Authorization': `Bearer ${token}` })
  };
};

// Handle API responses
const handleResponse = async (response) => {
  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
  }
  return response.json();
};

// Create a new transaction
export const createTransaction = async (transactionData) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/transactions/create`, {
      method: 'POST',
      headers: createHeaders(),
      body: JSON.stringify({
        name: transactionData.title, // Map title to name for backend
        amount: Math.round(transactionData.amount), // Convert to integer (paise)
        type: transactionData.type,
        emoji: transactionData.emoji
        // Note: date is auto-generated by backend with current timestamp
      })
    });

    return await handleResponse(response);
  } catch (error) {
    console.error('Error creating transaction:', error);
    throw error;
  }
};

// Get all transactions
export const getTransactions = async (options = {}) => {
  try {
    const params = new URLSearchParams();
    
    if (options.skip) params.append('skip', options.skip);
    if (options.limit) params.append('limit', options.limit);
    if (options.transaction_type) params.append('transaction_type', options.transaction_type);

    const url = `${API_BASE_URL}/api/transactions/list${params.toString() ? `?${params.toString()}` : ''}`;
    
    const response = await fetch(url, {
      method: 'GET',
      headers: createHeaders()
    });

    return await handleResponse(response);
  } catch (error) {
    console.error('Error fetching transactions:', error);
    throw error;
  }
};

// Get a specific transaction
export const getTransaction = async (transactionId) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/transactions/get/${transactionId}`, {
      method: 'GET',
      headers: createHeaders()
    });

    return await handleResponse(response);
  } catch (error) {
    console.error('Error fetching transaction:', error);
    throw error;
  }
};

// Update a transaction
export const updateTransaction = async (transactionId, updateData) => {
  try {
    const payload = {};
    
    if (updateData.title) payload.name = updateData.title;
    if (updateData.amount) payload.amount = Math.round(updateData.amount);
    if (updateData.type) payload.type = updateData.type;
    if (updateData.emoji) payload.emoji = updateData.emoji;

    const response = await fetch(`${API_BASE_URL}/api/transactions/update/${transactionId}`, {
      method: 'PUT',
      headers: createHeaders(),
      body: JSON.stringify(payload)
    });

    return await handleResponse(response);
  } catch (error) {
    console.error('Error updating transaction:', error);
    throw error;
  }
};

// Delete a transaction
export const deleteTransaction = async (transactionId) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/transactions/delete/${transactionId}`, {
      method: 'DELETE',
      headers: createHeaders()
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
    }

    return true; // Delete returns no content
  } catch (error) {
    console.error('Error deleting transaction:', error);
    throw error;
  }
};

// Get monthly summary
export const getMonthlyTransactionSummary = async (year, month) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/transactions/summary/monthly?year=${year}&month=${month}`,
      {
        method: 'GET',
        headers: createHeaders()
      }
    );

    return await handleResponse(response);
  } catch (error) {
    console.error('Error fetching monthly summary:', error);
    throw error;
  }
};